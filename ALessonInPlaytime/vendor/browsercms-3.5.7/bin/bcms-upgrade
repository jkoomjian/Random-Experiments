#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'term/ansicolor'
require 'rails/generators/actions'
require 'active_support/core_ext/string/inflections'
require 'cms/commands/actions'
require 'cms/version'

class String
  include Term::ANSIColor
end

class App < Thor
  include Thor::Actions
  include Rails::Generators::Actions
  include Cms::Commands::Actions

  desc "check", "Checks the existing module to determine what needs to done."
  def check
    puts "The following issues are preventing a BrowserCMS/Rails 3 upgrade.\n".red.bold

    # check for Jeweler usage
    if File.exists?("Rakefile")
      contents = ""
      File.open("Rakefile", "rb") { |f| contents = f.read }

      using_jeweler = contents.include?('jeweler')
      if using_jeweler
        migrate_jeweler
      end
    end

    # Check for routes usage
    if File.exists?("lib/#{name_of_module}/routes.rb")
      contents = ""
      File.open("lib/#{name_of_module}/routes.rb", "rb") { |f| contents = f.read }

      using_rails2_routes = contents.include?('cms.')
      if using_rails2_routes
        migrate_routes
      end
    end

    instructions = <<TEXT
Once there are no remaining changes have been made:
  1. Check in into source control
  2. Run bcms-upgrade rails cleanup bcms
TEXT
    puts instructions
  end

  desc 'v3_3_x', "Upgrades BrowserCMS files from 3.1.x to 3.3.x (Back up first)"

  def v3_3_x
    upgrade_to_3_3_0
  end

  desc 'module', "Upgrades a module. "
  def module
    unless project_is_module?
      say "This does not appear to be a BrowserCMS module. Skipping update."
      exit 0
    end
    upgrade_module_from_3_1_x_to_3_3_x if project_is_3_1_x?
    upgrade_from_3_3_x_to_3_4_x
  end

  desc 'next_steps', "Reprints instructions on final steps (Use after 'upgrade')"

  def next_steps
    header = <<TEXT
Next Steps:
============
TEXT
    puts header.red

    instructions = <<TEXT
This module has been upgraded to BrowserCMS 3.3 and Rails 3! Now just do the following to test:

1. Verify the Gemfile is correct (it may be using MySQL and/or Jeweler, which your project won't need)
2. There are several other files you should review that were likely overwritten by rails.
  a. README - [Revert | Delete] Either revert this, or delete it. (If you had a README.markdown for instance)
  b. test/test_helper [Merge | Keep] If you added anything custom to your test_helper, merge the changes into the new file.
  c. config/routes.rb - Any non-standard routes in this file should probably be in your lib/#{name_of_module}/routes.rb so they get packaged with the gem
3. rake db:drop db:create db:migrate db:seed - Rebuilds the database
4. rake test - Check that your tests still pass
  a. You may get test failure if your tests that don't use 'require 'test_helper' may need it. Just replace existing requires.
5. rails server - Start the app and test
6. Make sure the gemspec includes the correct files (lib/tasks/build_gem.rake should not be included)
7. If you have migrations that need to be in the gem, edit lib/generators/#{name_of_module}/install/install_generators.
8. Portlets/blocks may need to update their render.html.erb to include .html_safe for any content being output as HTML.
9. Release the gem (rake release)

TEXT
    puts instructions
  end

  private

  def new_rails
    puts "Overwriting with Rails 3 code."
    run "rails new . -f"
  end

  def upgrade_module_from_3_1_x_to_3_3_x
    puts "Upgrading to BrowserCMS 3.3.x..."
    new_rails
    cleanup_rails2_files
    cleanup_rails_3
    cleanup_module
    upgrade_to_3_3_0
    generate_bcms_module_for_3_3_x
    next_steps
  end

  # Removes any files which are Rails 2 specific
  def cleanup_rails2_files
    %w{about console dbconsole destroy generate performance plugin runner server}.each do |script_name|
      remove_file "script/#{script_name}"
    end
    remove_file "config/initializers/new_rails_defaults.rb"

  end

  # Clean up or revert all files associated with Rails 3 that should be rolled back or removed.
  def cleanup_rails_3
    remove_file "public/index.html"
  end

  def cleanup_module
    remove_file "rails/init.rb"
    remove_file "rails"
    remove_file "db/migrate/20080815014337_browsercms_3_0_0.rb"
    remove_file "db/migrate/20081114172307_load_seed_data.rb"
    remove_file "db/migrate/20091109175123_browsercms_3_0_5.rb"
    remove_file "app/views/layouts/application.html.erb"
    remove_file "config/initializers/init_module.rb"

    puts "Reverting some files using git.".red
    git :checkout => '.gitignore'
    git :checkout => 'doc/README_FOR_APP'
    git :checkout => 'config/database.yml'
  end


  def upgrade_from_3_3_x_to_3_4_x
    remove_dir "script" # Wipe out any old scripts, using new Rails 3.1 mountable script.
    remove_file 'config.ru'
    run "rails plugin new . --mountable --force"
    revert "lib/#{name_of_module}/engine.rb"
    revert "lib/#{name_of_module}/version.rb"
    revert "#{name_of_module}.gemspec"

    remove_file "MIT-LICENSE"
    remove_file "README.rdoc"
    move_file "config/database.yml", "test/dummy/config/database.yml"

    move_file "config/routes.rb", "tmp/routes.rb" # Backup to avoid getting overwritten by plugin
    remove_dir "config"
    empty_directory "config"
    move_file "tmp/routes.rb", "config/routes.rb"

    prepend_to_file "lib/#{name_of_module}/engine.rb", "require 'browsercms'\n"
    include_cms_module

    remove_dir "app/views/layouts"
    remove_file "app/controllers/application_controller.rb"
    remove_file "app/helpers/application_helper.rb"

    move_dir "public/bcms/#{name_of_module.gsub("bcms_", "")}", "app/assets"
    remove_dir "public"

    append_to_file "test/dummy/config/routes.rb", "\tmount_browsercms\n", :after=>"/#{name_of_module}\"\n"

    # Clean up db/ folder
    remove_file "db/schema.rb"
    remove_file "db/seeds.rb"
    remove_files "db/migrate/*_browsercms*.rb"
    remove_files "db/*.sqlite3"

    # Create a seed data file
    create_file "test/dummy/db/seeds.rb", "# Add seed data here"

  end

  # Does a git revert of a file.
  def revert(file)
    git :checkout => file
  end

  # Move all the contents of a given directory into the specified directory
  # @param [String] src Relative name of src directory (with project)
  # @param [String] dest Relative name of dest directory (with project)
  # @param [Hash] config
  def move_dir(src, dest, config={})
    src_path = File.expand_path(src, destination_root)

    Dir.glob(File.join(src_path, '*')).each do |file|
      to = File.join(destination_root, dest, File.basename(file))
      FileUtils.mv file, to
      say_status :mv, "#{relative_to_original_destination_root(file)} -> #{relative_to_original_destination_root(to)}", config.fetch(:verbose, true)

    end
  end

  # Remove a set of files matching a glob pattern.
  # @param [String] pattern i.e. db/migrate/*_browsercms_*.rb
  def remove_files(pattern)
    Dir.glob(File.join(destination_root, pattern)).each do |file|
      remove_file file
    end
  end

  # Move a file within the destination directory
  # @param [String] src
  # @param [String] dest
  # @param [Hash] config
  def move_file(src, dest, config={})
    src_path = File.expand_path(src, destination_root)
    dest_path = File.expand_path(dest, destination_root)
    say_status :mv, "#{relative_to_original_destination_root(src_path)} -> #{relative_to_original_destination_root(dest_path)}", config.fetch(:verbose, true)
    FileUtils.mv(src_path, dest_path)
  end

  def upgrade_to_3_3_0
    # Remove public files where are now served from CMS core.
    remove_file 'public/bcms/ckeditor'
    remove_file 'public/images/cms'
    remove_file 'public/javascripts/cms'
    remove_file 'public/stylesheets/cms'
    %w{jquery jquery.-ui jquery.contextMenu jquery.cookie jquery.dimensions jquery.selectbox-0.5 jquery.taglist jquery.thickbox}.each do |js|
      remove_file "public/javascripts/#{js}.js"
    end

  end

  def generate_bcms_module_for_3_3_x
    gem 'browsercms'
    gem 'mysql'
    gem 'jeweler', :group=>:development

    # Allows gem to be loaded as a engine for testing.
    append_to_file 'Gemfile', 'gemspec'

    create_file "lib/#{name_of_module}/engine.rb", "# Engine goes here"
    prepend_to_file "lib/#{name_of_module}.rb" do
      "require '#{name_of_module}/engine'\n"
    end
    route "mount_browsercms"
    route "routes_for_#{name_of_module}"

    generate_installation_script


    run "rails g browser_cms:cms -f"
    run 'rails g cms:template default'


  end


  def migrate_jeweler

    instructions = <<TEXT
    Move Jeweler Code
    ============
    1. Copy any Jeweler related files from your Rakefile into lib/tasks/build_gem.rake.
    2. Run rake -T and make sure all Jeweler tasks are still there.

    Alternatively, you may use bundler to handle the packaging.
TEXT
    alert("Using Jeweler", instructions, "https://github.com/browsermedia/browsercms/wiki/Upgrading-Jeweler-with-Rails-3", ["Rakefile"])
    copy_file 'build_gem.rake', 'lib/tasks/build_gem.rake'

  end


  def migrate_routes
    instructions = <<TEXT
Edit lib/#{name_of_module}/routes.rb
=====
# Make it Rails 3 style
module Cms::Routes
  def routes_for_#{name_of_module}
    namespace(:cms) do
      content_blocks :name_of_blocks
    end
  end
end
TEXT
    alert("Obsolete Routing API", instructions, 'https://github.com/browsermedia/browsercms/wiki/Upgrading-Routes-to-Rails-3', ["lib/#{name_of_module}/routes.rb"])

  end

  def name_of_module
    File.basename(Dir.pwd)
  end

  def gem_name
    name_of_module.camelize
  end

  # Borrowed from https://github.com/jm/rails-upgrade/blob/master/lib/rails-upgrade/upgraders/check.rb
  def alert(title, text, more_info_url, culprits)
    puts title.red.bold
    puts text.white
    puts "More information: ".white.bold + more_info_url.blue
    puts
    puts "The culprits: ".white
    culprits.each do |c|
      puts "\t- #{c}".yellow
    end
  ensure
    puts "".reset
  end

  # Determines if the current projects is a BrowserCMS module or not.
  def project_is_module?
    module_file = File.expand_path(File.join(destination_root, "lib", "#{name_of_module}.rb"))
    File.exists?(module_file)
  end

  def project_is_3_1_x?
    rails_console = File.expand_path(File.join(destination_root, "script", "console"))
    File.exists?(rails_console)
  end
end


App.start
